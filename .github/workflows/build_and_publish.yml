name: Build and Publish Launch Releases

on:
  push:
    branches:
      - master
      - dkn-compute-exe
    paths:
      - 'main.go'
      - 'utils/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/build_and_publish.yml'

jobs:
  build:
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        include:
          - { runner: macos-latest,  goos: darwin,  osname: macOS,   arch: amd64, tags: netcgo        }
          - { runner: macos-latest,  goos: darwin,  osname: macOS,   arch: arm64, tags: netcgo        }
          - { runner: ubuntu-latest, goos: linux,   osname: linux,   arch: amd64, env:  CGO_ENABLED=0 }
          - { runner: ubuntu-latest, goos: linux,   osname: linux,   arch: arm64, env:  CGO_ENABLED=0 }
          - { runner: ubuntu-latest, goos: windows, osname: windows, arch: amd64, env:  CGO_ENABLED=0, extension: ".exe" }
          - { runner: ubuntu-latest, goos: windows, osname: windows, arch: arm64, env:  CGO_ENABLED=0, extension: ".exe" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.5'

      - name: Build Go app
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
        run: |
          ${{ matrix.env }} go build -tags="${{ matrix.tags }}" -o dkn-compute-launcher${{ matrix.extension }} .


      - name: Download dkn-compute binaries
        env:
          FOLDER_NAME: dkn-compute-node
          ZIP_NAME: dkn-compute-launcher-${{ matrix.osname }}-${{ matrix.arch }}
        run: |
          # download exe
          mkdir node_exe
          cd node_exe
          echo "Downloading dkn-compute-node-${{ matrix.osname }}-${{ matrix.arch }}.zip..."
          # todo: fix the latest tag url
          if curl -L https://github.com/firstbatchxyz/dkn-compute-node/releases/download/v0.2.0/dkn-compute-node-${{ matrix.osname }}-${{ matrix.arch }}.zip; then
              echo "Download completed."
              file *
              ls
          else
              echo "Error: Failed to download the zip file."
              exit 1
          fi


      - name: Prepare Launch Release Files
        env:
          FOLDER_NAME: dkn-compute-node
          ZIP_NAME: dkn-compute-launcher-${{ matrix.osname }}-${{ matrix.arch }}
        run: |
          mkdir $FOLDER_NAME
          # copy the binary
          cp ./dkn-compute-launcher${{ matrix.extension }} $FOLDER_NAME/dkn-compute-launcher${{ matrix.extension }}
          
          # download .env.example and save it as .env
          curl -o $FOLDER_NAME/.env https://raw.githubusercontent.com/firstbatchxyz/dkn-compute-node/master/.env.example

          # copy exe to zip folder
          cd node_exe
          if [ ! -f dkn-compute-node-exe.zip ]; then
              echo "Error: ZIP file not found!"
              exit 1
          fi

          # Test the ZIP file for corruption
          unzip -t *
          if [ $? -ne 0 ]; then
              echo "Error: Corrupted ZIP file!"
              exit 1
          fi

          unzip dkn-compute-node-exe.zip
          cp dkn-compute${{ matrix.extension }} ../$FOLDER_NAME/dkn-compute${{ matrix.extension }}
          cd ..

          zip -r $ZIP_NAME.zip $FOLDER_NAME


      - name: Upload Launch Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dkn-compute-launcher-${{ matrix.osname }}-${{ matrix.arch }}
          path: dkn-compute-launcher-${{ matrix.osname }}-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Launch Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts

      - name: Get the latest tag
        id: get_latest_tag
        run: echo "latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Calculate new tag
        id: calculate_tag
        run: |
          latest_tag=${{ env.latest_tag }}
          if [ -z "$latest_tag" ]; then
            new_tag="v0.0.1"
          else
            IFS='.' read -ra VERSION_PARTS <<< "${latest_tag#v}"
            major=${VERSION_PARTS[0]}
            minor=${VERSION_PARTS[1]}
            patch=${VERSION_PARTS[2]}
            new_patch=$((patch + 1))
            new_tag="v${major}.${minor}.${new_patch}"
          fi
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

      - name: Create release with artifacts
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.NEW_TAG }}
          tag: ${{ env.NEW_TAG }}
          artifacts: "artifacts/*"
          artifactContentType: application/zip
          draft: true
